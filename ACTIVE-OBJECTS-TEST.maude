

mod ASYNC-CALL is
  protecting ACTIVE-OBJECTS-SEMANTICS .
  
    op objTest1 : -> Configuration .
  
    ops ob1 sig1 methBod1 meth1 : -> Oid .
    op xValue : -> Int .
  eq xValue = 3 .
  ops fut1 fut2 : -> FutureOid .
    ops add : -> MethodName [ctor] .
      op sig1 : -> Oid .
    
    op duA : -> Args .
    ops ST S SS : -> Statement .
    eq ST = suspend3 ; suspend3 .
    eq SS = suspend ; suspend .
    op methBod1 : -> Oid .
    op meth1 : -> Oid .
  
  
    op x : -> LocalVar [ctor] .
    op E : -> Expr .
    ops m : -> MethodName [ctor] .
  
op LV : -> LocalVarList .
op LV1 : -> LocalVarList .
ops p1 p2 : -> ProcessState [ctor] . 
eq p1 = { x | ( x = E . m(duA) ) } .
eq p2 = { LV | ( x = E . m(duA) ) } .
op P : -> ProcessPool [ctor] .
eq P = p1 .


op pl : -> ParamList [ctor] .
  eq pl = xx yy .
  op xx : -> LocalVar [ctor] .
  op yy : -> LocalVar [ctor] .

  op argsEx : -> Args [ctor] .
  eq argsEx = (three, four) .
  op three : -> Value .
  op four  : -> Value .

  op testBindParams : -> Statement .
  eq testBindParams = bindParams(pl, argsEx) .
  
  var OO : Oid .
  
  eq objTest1 = < ob1 : OBJECT | id : ob1, fields : 100, proc : { x | ( x = E ! add(argsEx) ) ; ST }, suspended : P >
  < fut1 : Future | value : someBool, state : unresolved >
 
  < sig1 : SIGNATURE | ret : bool, name : add, params : pl > 
  < methBod1 : METHODBODY | locals : x ; x, stmt : SS > 
  < meth1 : METHOD | sig : sig1, body : methBod1 >
  
 .
  
  
  
  ---  < O : OBJECT | id : O, fields : 100, proc : { L | x = E ! M(dummyA)  }, suspended : Q >
  ---  < OO : OBJECT | id : O, fields : 400 >
  
  
  
 --- < O : OBJECT | id : O, fields : 100, proc : PS, suspended : P >
    ---invoc(o, f, m, v)
  
 
  
  op testBind : -> ProcessState .
  eq testBind = bind(ob1, fut1, add, duA) .

  

endm
---red in SELF-SYNC-CALL : testBind .
rew in ASYNC-CALL : objTest1 .
---red in SELF-SYNC-CALL : objTest2 .

---rew in ACTIVE-OBJECTS-SYNTAX-TEST : objTest .








mod INVOC is
  protecting ACTIVE-OBJECTS-SEMANTICS .
  
    op objTest1 : -> Configuration .
  
    ops ob1 sig1 methBod1 meth1 : -> Oid .
    op xValue : -> Int .
  eq xValue = 3 .
  ops fut1 fut2 : -> FutureOid .
    ops add : -> MethodName [ctor] .
      op sig1 : -> Oid .
    
    op duA : -> Args .
    ops ST S SS : -> Statement .
    eq ST = suspend3 ; suspend3 .
    eq SS = suspend ; suspend .
    op methBod1 : -> Oid .
    op meth1 : -> Oid .
  
  
    op x : -> LocalVar [ctor] .
    op E : -> Expr .
    ops m : -> MethodName [ctor] .
  
op LV : -> LocalVarList .
op LV1 : -> LocalVarList .
ops p1 p2 : -> ProcessState [ctor] . 
eq p1 = { x | ( x = E . m(duA) ) } .
eq p2 = { LV | ( x = E . m(duA) ) } .
op P : -> ProcessPool [ctor] .
eq P = p1 .


op pl : -> ParamList [ctor] .
  eq pl = xx yy .
  op xx : -> LocalVar [ctor] .
  op yy : -> LocalVar [ctor] .

  op argsEx : -> Args [ctor] .
  eq argsEx = (three, four) .
  op three : -> Value .
  op four  : -> Value .

  op testBindParams : -> Statement .
  eq testBindParams = bindParams(pl, argsEx) .
  
  
  
  eq objTest1 = < ob1 : OBJECT | id : ob1, fields : 100, proc : idle, suspended : P >
    invoc(ob1, fut1, add, argsEx) 
  < fut1 : Future | value : someBool, state : unresolved >
 
  < sig1 : SIGNATURE | ret : bool, name : add, params : pl > 
  < methBod1 : METHODBODY | locals : x ; x, stmt : SS > 
  < meth1 : METHOD | sig : sig1, body : methBod1 >
  
 .
  
  
  
  --- < O : OBJECT | id : O, fields : 100, proc : PS, suspended : P >
    ---invoc(O, FF, M, V)
  
  
  
 --- < O : OBJECT | id : O, fields : 100, proc : PS, suspended : P >
    ---invoc(o, f, m, v)
  
  
  
  
  
  
  
  
  op testBind : -> ProcessState .
  eq testBind = bind(ob1, fut1, add, duA) .

  

endm
---red in SELF-SYNC-CALL : testBind .
rew in INVOC : objTest1 .






mod RETURN is
  protecting ACTIVE-OBJECTS-SEMANTICS .
  
    op objTest1 : -> Configuration .
  
    ops ob1 sig1 methBod1 meth1 : -> Oid .
    op xValue : -> Int .
  eq xValue = 3 .
  ops fut1 fut2 : -> FutureOid .
    ops add : -> MethodName [ctor] .
      op sig1 : -> Oid .
    
    op duA : -> Args .
    ops ST S SS : -> Statement .
    op methBod1 : -> Oid .
    op meth1 : -> Oid .
  
      eq ST = suspend3 ; suspend3 .
    eq SS = suspend ; suspend .
  
    op x : -> LocalVar [ctor] .
    op E : -> Expr .
    ops m : -> MethodName [ctor] .
  
op LV : -> LocalVarList .
op LV1 : -> LocalVarList .
ops p1 p2 : -> ProcessState [ctor] . 
eq p1 = { x | ( x = E . m(duA) ) } .
eq p2 = { LV | ( x = E . m(duA) ) } .
op P : -> ProcessPool [ctor] .
eq P = p1 .


op pl : -> ParamList [ctor] .
  eq pl = xx yy .
  op xx : -> LocalVar [ctor] .
  op yy : -> LocalVar [ctor] .

  op argsEx : -> Args [ctor] .
  eq argsEx = (three, four) .
  op three : -> Value .
  op four  : -> Value .

  op testBindParams : -> Statement .
  eq testBindParams = bindParams(pl, argsEx) .
  
  
  
  eq objTest1 = < ob1 : OBJECT |  id : ob1, fields : 330, 
 proc : { x | return(E) ; ST }, 

  suspended : emptyPool  > 
  < fut1 : Future | value : someInt(50), state : unresolved >
 
 
  
 .
  
  
  op testBind : -> ProcessState .
  eq testBind = bind(ob1, fut1, add, duA) .

  

endm
---red in SELF-SYNC-CALL : testBind .
rew in RETURN : objTest1 .
---red in SELF-SYNC-CALL : objTest2 .
---rew in ACTIVE-OBJECTS-SYNTAX-TEST : objTest .



mod SYNC-CALL is
  protecting ACTIVE-OBJECTS-SEMANTICS .
  
    op objTest1 : -> Configuration .
  
    ops ob1 sig1 methBod1 meth1 : -> Oid .
    op xValue : -> Int .
  eq xValue = 3 .
  ops fut1 fut2 : -> FutureOid .
    ops add : -> MethodName [ctor] .
      op sig1 : -> Oid .
    
    op duA : -> Args .
    ops ST S SS : -> Statement .
    op methBod1 : -> Oid .
    op meth1 : -> Oid .
  
      eq ST = suspend3 ; suspend3 .
    eq SS = suspend ; suspend .
  
    op x : -> LocalVar [ctor] .
    op E : -> Expr .
    ops m : -> MethodName [ctor] .
  
op LV : -> LocalVarList .
op LV1 : -> LocalVarList .
ops p1 p2 : -> ProcessState [ctor] . 
eq p1 = { x | ( x = E . m(duA) ) } .
eq p2 = { LV | ( x = E . m(duA) ) } .
op P : -> ProcessPool [ctor] .
eq P = p1 .


op pl : -> ParamList [ctor] .
  eq pl = xx yy .
  op xx : -> LocalVar [ctor] .
  op yy : -> LocalVar [ctor] .

  op argsEx : -> Args [ctor] .
  eq argsEx = (three, four) .
  op three : -> Value .
  op four  : -> Value .

  op testBindParams : -> Statement .
  eq testBindParams = bindParams(pl, argsEx) .
  
  
  
  eq objTest1 = < ob1 : OBJECT |  id : ob1, fields : 5, 
 proc : { x | ( x = E . add(argsEx) ) ; ST }, 

  suspended : emptyPool  > 
  < fut1 : Future | value : someBool, state : unresolved >
 
  < sig1 : SIGNATURE | ret : bool, name : add, params : pl > 
  < methBod1 : METHODBODY | locals : x ; x, stmt : SS > 
  < meth1 : METHOD | sig : sig1, body : methBod1 >
  
 .
  
  
  
  
  
  
  
  op testBind : -> ProcessState .
  eq testBind = bind(ob1, fut1, add, duA) .

  

endm





rew in SYNC-CALL : objTest1 .
---red in SELF-SYNC-CALL : objTest2 .
---rew in ACTIVE-OBJECTS-SYNTAX-TEST : objTest .








mod SELF-SYNC-RETURN is
  protecting ACTIVE-OBJECTS-SEMANTICS .
  
    op objTest1 : -> Configuration .
  
    ops ob1 sig1 methBod1 meth1 : -> Oid .
    op xValue : -> Int .
  eq xValue = 3 .
  ops fut1 fut2 : -> FutureOid .
    ops add : -> MethodName [ctor] .
      op sig1 : -> Oid .
    
    op duA : -> Args .
    ops ST S SS : -> Statement .
    op methBod1 : -> Oid .
    op meth1 : -> Oid .
  
  
    op x : -> LocalVar [ctor] .
    ops XX YY : -> LocalVarList [ctor] .
    op E : -> Expr .
    ops m : -> MethodName [ctor] .
  
op LV : -> LocalVarList [ctor] .
op LV1 : -> LocalVarList .
ops p1 p2 : -> ProcessState [ctor] . 
eq p1 = { x | ( x = E . m(duA) ) } .
eq p2 = { LV | ( x = E . m(duA) ) } .
op P : -> ProcessPool [ctor] .
eq P = p1 .

op pl : -> ParamList [ctor] .
  eq pl = xx yy .
  op xx : -> LocalVar [ctor] .
  op yy : -> LocalVar [ctor] .

  op argsEx : -> Args [ctor] .
  eq argsEx = (three, four) .
  op three : -> Value .
  op four  : -> Value .

  op testBindParams : -> Statement .
  eq testBindParams = bindParams(pl, argsEx) .
  
  
  
    
    
  eq objTest1 =   < fut1 : Future |  >
  < ob1 : OBJECT |  id : ob1, fields : 35, proc : { XX | cont(fut1) }, suspended : { YY | S } > .
  
  
    

  
    
  

endm
---red in SELF-SYNC-CALL : testBind .
rew in SELF-SYNC-RETURN : objTest1 .
---red in SELF-SYNC-CALL : objTest2 .
---rew in ACTIVE-OBJECTS-SYNTAX-TEST : objTest .




mod SELF-SYNC-CALL is
  protecting ACTIVE-OBJECTS-SEMANTICS .
  
    op objTest1 : -> Configuration .
  
    ops ob1 sig1 methBod1 meth1 : -> Oid .
    op xValue : -> Int .
  eq xValue = 3 .
  ops fut1 fut2 : -> FutureOid .
    ops add : -> MethodName [ctor] .
      op sig1 : -> Oid .
    
    op duA : -> Args .
    ops ST S SS : -> Statement .
    eq ST = suspend3 ; suspend3 .
    eq SS = suspend ; suspend .
    op methBod1 : -> Oid .
    op meth1 : -> Oid .
  
  
    op x : -> LocalVar [ctor] .
    op E : -> Expr .
    ops m : -> MethodName [ctor] .
  
op LV : -> LocalVarList .
op LV1 : -> LocalVarList .
ops p1 p2 : -> ProcessState [ctor] . 
eq p1 = { x | ( x = E . m(duA) ) } .
eq p2 = { LV | ( x = E . m(duA) ) } .
op P : -> ProcessPool [ctor] .
eq P = p1 .


op pl : -> ParamList [ctor] .
  eq pl = xx yy .
  op xx : -> LocalVar [ctor] .
  op yy : -> LocalVar [ctor] .

  op argsEx : -> Args [ctor] .
  eq argsEx = (three, four) .
  op three : -> Value .
  op four  : -> Value .

  op testBindParams : -> Statement .
  eq testBindParams = bindParams(pl, argsEx) .
  
  
  
  eq objTest1 = < ob1 : OBJECT |  id : ob1, fields : 4, 
 proc : { x | ( x = E . add(argsEx) ) ; ST }, 

  suspended : emptyPool  > 
  < fut1 : Future | value : someBool, state : unresolved >
 
  < sig1 : SIGNATURE | ret : bool, name : add, params : pl > 
  < methBod1 : METHODBODY | locals : x ; x, stmt : SS > 
  < meth1 : METHOD | sig : sig1, body : methBod1 >
  
 .
  
  
  
  
  op testBind : -> ProcessState .
  eq testBind = bind(ob1, fut1, add, duA) .

  

endm
---red in SELF-SYNC-CALL : testBind .
rew in SELF-SYNC-CALL : objTest1 .
---red in SELF-SYNC-CALL : objTest2 .

---rew in ACTIVE-OBJECTS-SYNTAX-TEST : objTest .


mod ACTIVE-OBJECTS-SYNTAX-TEST is
  ex ACTIVE-OBJECTS-SEMANTICS .
  
  op xValue : -> Int .
  eq xValue = 3 .
     --- op x : -> LocalVar .
    
  ops SS St : -> Statement .
  op E : -> Expr .
  op S : -> Statement .
  
  
  ops add m : -> MethodName [ctor] .
  op x : -> LocalVar [ctor] .
  op y : -> LocalVar [ctor] .
  op xx : -> VarSet [ctor] .
  
  op pl : -> ParamList [ctor] .
  eq pl = x y .
  
  op T : -> Type .
  eq T = bool .
  op LV : -> LocalVar .
  op ob1 : -> Oid .
  op sig1 : -> Oid .
  op methBod1 : -> Oid .
  op meth1 : -> Oid .
  op objTest : -> Configuration .
  op someBool : -> ValueOption .
  op duA : -> Args .
  ops fut1 fut2 : -> Oid .
    
  op futureList : -> FutureList .
  eq futureList = < fut1 : Future | value : someBool, state : unresolved > :: 
  				< fut2 : Future | value : someBool, state : resolved > :: 
  				nil .
    
  eq objTest = < ob1 : OBJECT |  id : ob1, fields : xValue, proc : 
  { LV | ( x = E . m(duA) after futureList ) ; S }, suspended : emptyPool > 
  
  < sig1 : SIGNATURE | ret : bool, name : add, params : pl > 
  < methBod1 : METHODBODY | locals : x, stmt : SS > 
  < meth1 : METHOD | sig : sig1, body : methBod1 > .
  
  ---class SIGNATURE | ret : Type, name : MethodName, params : ParamList .
  ---class METHOD | sig : Object, body : Object .  
  ---class METHODBODY | locals : VarSet, stmt : Statement .
  

  
  
  
 --- op initList : -> FutureList .
 ---  eq initList = < fut1 : Future | value : someBool, state : resolved > :: nil . 
 --- :: nil

  op futureTest : -> Configuration .
  eq futureTest = < fut1 : Future | value : someBool, state : unresolved > .

endm
rew in ACTIVE-OBJECTS-SYNTAX-TEST : objTest .