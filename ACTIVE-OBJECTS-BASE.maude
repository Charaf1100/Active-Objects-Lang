

omod ACTIVE-OBJECTS-BASE is
  protecting NAT .
  protecting INT .
  protecting QID .
  protecting BOOL .
  inc CONFIGURATION .



  sorts FutureList FutureState FutureOid Destiny LocalVarList after Expr LocalVar Statement Value ValueOption Fields 
  ProcessPool ProcessState MethodName Args VarSet Type ParamList  .
  subsort Oid < Qid .
  subsort Oid < Expr .
  subsort Destiny < FutureOid .
  subsort Destiny < LocalVar .
  subsort FutureOid Value Oid < Expr .
  subsort FutureOid < Oid .
  subsort ProcessState < ProcessPool .
  



  --- Classes
  class SIGNATURE | ret : Type, name : MethodName, params : ParamList .
  class METHOD | sig : Oid, body : Oid .  
  class OBJECT | id : Oid, fields : Int, proc : ProcessState, suspended : ProcessPool .
  class METHODBODY | locals : LocalVarList, stmt : Statement .
  class Future | value : ValueOption, state : FutureState .


  ops unresolved resolved : -> FutureState .


  --- Operators for ValueOption
  ops none : -> ValueOption .
  ops someBool : Bool -> ValueOption .  
  ops someInt  : Int  -> ValueOption .  
  ops someString : String -> ValueOption .



  --- Operators for FutureList
  op nil : -> FutureList .
  op _::_ : Object FutureList -> FutureList [ctor] .



  var O : Oid .
  var V : ValueOption .
  var FL : FutureList .
  var St : FutureState .
  

  op isResolvedF : Object -> Bool .
  eq isResolvedF(< O : Future | value : V, state : resolved >) = true .
  eq isResolvedF(< O : Future | value : V, state : unresolved >) = false .


  op allResolvedList : FutureList -> Bool .
  eq allResolvedList(nil) = true .
  eq allResolvedList(< O : Future | value : V, state : St > :: FL) =
       if isResolvedF(< O : Future | value : V, state : St >)
       then allResolvedList(FL)
       else false
       fi .
  
  
  --- Operators for ProcessPool
  ops emptyPool emptyPoolZ : -> ProcessPool .
  op _;_ : ProcessPool ProcessPool -> ProcessPool [assoc comm id: emptyPool] .
  op _:=_ : LocalVar Value -> Statement [ctor] .


  --- Operators for process state
  ops idle : -> ProcessState .
  op { _ | _ } : LocalVar Statement -> ProcessState [ctor] .
  op { _ | _ } : LocalVarList Statement -> ProcessState [ctor] .


  --- Operators for LocalVarList
  subsort LocalVar < LocalVarList .
  op emptyVarList : -> LocalVarList [ctor] .
  op _;_ : LocalVarList LocalVarList -> LocalVarList [assoc comm id: emptyVarList] .


  --- Operators for after claude
  op _= _._(_)after_ : LocalVar Expr MethodName Args Oid -> Statement [ctor] .
  op _= _!_(_)after_ : LocalVar Expr MethodName Args Oid -> Statement [ctor] .
  op _= _._(_)after_ : LocalVar Expr MethodName Args FutureList -> Statement [ctor] .
  op _= _!_(_)after_ : LocalVar Expr MethodName Args FutureList -> Statement [ctor] .
  op _= _._(_) : LocalVar Expr MethodName Args -> Statement [ctor] .
  
  
  --- Operators for Statement
  op _= _!_(_) : LocalVar Expr MethodName Args -> Statement [ctor] .
  op _= _ : LocalVar FutureOid -> Statement [ctor] .
  op _;_ : Statement Statement -> Statement [ctor assoc] .
  op cont : FutureOid -> Statement [ctor] .
  op return : Expr -> Statement [ctor] .
  op suspend : -> Statement [ctor] .
  op suspend3 : -> Statement [ctor] .
  op await : Bool -> Statement [ctor] .
  op _:= get(_) : LocalVar Oid -> Statement [ctor] .
  
  ops bool string int real : -> Type .
  op invoc : Oid FutureOid MethodName Args -> Msg [ctor] .
 
 
  --- Operators for ParamList
  subsort LocalVar < ParamList .
  op emptyParams : -> ParamList [ctor] .
  op __ : LocalVar LocalVar -> ParamList [id: emptyParams] .

  op destiny : -> Destiny .
  op fresh : -> FutureOid [ctor] .
  op _,_ : Value Value -> Args [ctor] .
  
  

  

endom