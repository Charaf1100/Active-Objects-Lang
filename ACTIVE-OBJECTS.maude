omod ACTIVE-OBJECTS is
  protecting NAT .
  protecting INT .
  protecting QID .
  protecting BOOL .
  inc CONFIGURATION .












  vars V : ValueOption .
  vars FL : FutureList .
  vars St : FutureState .

  sort FutureList .
  op nil : -> FutureList .
  op _::_ : Object FutureList -> FutureList [ctor] .

  --- Helper: Check if a Future object is resolved.
  op isResolvedF : Object -> Bool .
  eq isResolvedF(< O : Future | value : V, state : resolved >) = true .
  eq isResolvedF(< O : Future | value : V, state : unresolved >) = false .

  --- Function: Check if all futures in a list are resolved.
  op allResolvedList : FutureList -> Bool .
  eq allResolvedList(nil) = true .
  eq allResolvedList(< O : Future | value : V, state : St > :: FL) =
       if isResolvedF(< O : Future | value : V, state : St >)
       then allResolvedList(FL)
       else false
       fi .








  sorts Destiny LocalVarList after Expr LocalVar Statement Value ValueOption Fields ProcessPool ProcessState MethodName Args VarSet .
  subsort Oid < Qid .
  subsort Destiny < FutureOid .
  subsort Destiny < LocalVar .


  subsort Value Oid < Expr .

  sorts CalleeOid FutureOid .
  subsort CalleeOid FutureOid < Oid .

  ops emptyPool emptyPoolZ : -> ProcessPool .
  op _;_ : ProcessPool ProcessPool -> ProcessPool [assoc comm id: emptyPool] .
  op _:=_ : LocalVar Value -> Statement [ctor] .

  --- Operators for process state
  ops idle : -> ProcessState .
  op { _ | _ } : LocalVar Statement -> ProcessState [ctor] .
op singleVar : LocalVar -> VarSet [ctor] .

op emptyVars : -> VarSet [ctor] .
op _;_ : VarSet VarSet -> VarSet [assoc id: emptyVars] .

  class OBJECT | id : Oid, fields : Int, proc : ProcessState, suspended : ProcessPool .
  class METHODBODY | locals : LocalVarList, stmt : Statement .

  subsort LocalVar < LocalVarList .
  op emptyVarList : -> LocalVarList [ctor] .
  op _;_ : LocalVarList LocalVarList -> LocalVarList [assoc comm id: emptyVarList] .


  op _= _._(_)after_ : LocalVar Expr MethodName Args Oid -> Statement [ctor] .
  op _= _._(_)after_ : LocalVar Expr MethodName Args FutureList -> Statement [ctor] .
  op _= _._(_) : LocalVar Expr MethodName Args -> Statement [ctor] .

  --- Future constructor operator.
  vars F : FutureOid .
  vars val : Bool .

  op cont : FutureOid -> Statement [ctor] .

  --- suspend: suspends the currently running process (moves it into the pending pool).
  op suspend : -> Statement [ctor] .
  op suspend3 : -> Statement [ctor] .
  op cont : FutureOid -> Statement [ctor] .

  sort Type .
  ops bool string int real : -> Type .
  sort ParamList .
  subsort LocalVar < ParamList .
  op emptyParams : -> ParamList [ctor] .
  op __ : ParamList LocalVar -> ParamList [id: emptyParams] .

  sort TypeSet .
  subsort Type < TypeSet .
  op none : -> TypeSet .
  op __ : TypeSet TypeSet -> TypeSet [assoc comm id: none] .

  --- Await statement.
  op await : Bool -> Statement [ctor] .

  --- Sequence operator for statements.
  op _;_ : Statement Statement -> Statement [ctor assoc] .

  vars O       : Oid .
  vars a       : Int .
  vars L       : LocalVar .
  vars e       : Expr .
  vars dummyM  : MethodName .
  vars dummyA  : Args .
  vars fs      : TypeSet .
  vars S       : Statement .
  vars Q       : ProcessPool .
  var FS       : FutureState .
  var FSS       : FutureList .
  var P			: ProcessPool .
  var x : LocalVar .
  
  vars FF : Oid .
  vars VV : ValueOption .
  
  
  rl [Sync-Call-After] :

    < O : OBJECT | id : O, fields : a,       
    proc : { L | ( x = e . dummyM(dummyA) after FSS ) ; S },
    suspended : P >
    =>
    
    < O : OBJECT |  id : O, fields : 33, 
    proc : { L | ---suspend3 },
    	if allResolvedList(FSS) 
    	then ( x = e . dummyM(dummyA) ) ; S
    	else  ( suspend3 ; x = e . dummyM(dummyA) after FSS ) ; S
    	---else (suspend ) ; S 
    	fi}, 
    	suspended : P > .
---   op _= _._(_)after_ : LocalVar Expr MethodName Args Bool -> Statement [ctor] .

sort FutureState .
ops unresolved resolved : -> FutureState .

ops none : -> ValueOption .  --- Represents an unset value
ops someBool : Bool -> ValueOption .  
ops someInt  : Int  -> ValueOption .  
ops someString : String -> ValueOption .




class Future | value : ValueOption, state : FutureState .
class SIGNATURE | ret : Type, name : MethodName, params : ParamList .
class METHOD | sig : Oid, body : Oid .  
endom